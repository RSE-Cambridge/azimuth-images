#!/usr/bin/env bash

set -eo pipefail

REPO_ROOT="$(dirname $(dirname $(realpath ${BASH_SOURCE[0]:-${(%):-%x}})))"
source "$REPO_ROOT/bin/env-vars"

PACKER_VAR_FILES_ARGS=
if [ -n "$PACKER_VAR_FILES" ]; then
    IFS="," read -ra PACKER_VAR_FILES_ARR <<< "$PACKER_VAR_FILES"
    for FILE in "${PACKER_VAR_FILES_ARR[@]}"; do
        if [ -z "$FILE" ]; then continue; fi
        PACKER_VAR_FILES_ARGS="$PACKER_VAR_FILES_ARGS -var-file=$REPO_ROOT/$FILE"
    done
fi

set -x

# If an image URL is set, download it and upload it as a temporary image
if [ -n "$SOURCE_IMAGE_URL" ]; then
    export PKR_VAR_source_image_name="packer-$(uuidgen | tr '[:upper:]' '[:lower:]')"
    curl -Lo "$PKR_VAR_source_image_name.download" "$SOURCE_IMAGE_URL"
    openstack image create \
      --progress \
      --private \
      --container-format "${SOURCE_IMAGE_CONTAINER_FORMAT:-bare}" \
      --disk-format "${SOURCE_IMAGE_DISK_FORMAT:-qcow2}" \
      --file "$PKR_VAR_source_image_name.download" \
      $SOURCE_IMAGE_PROPERTIES \
      "$PKR_VAR_source_image_name"
fi

# Now the temporary image has been uploaded, we want to clean it up
# whether the build is successful or not, but use the exit code from packer
set +e

PACKER_LOG=1 \
  packer build \
    --on-error=cleanup \
    $PACKER_VAR_FILES_ARGS \
    $PACKER_EXTRA_ARGS \
    "$REPO_ROOT/packer/$PACKER_TEMPLATE.pkr.hcl"
EXIT_CODE="$?"

set -e

if [ -f "$PKR_VAR_source_image_name.download" ]; then
    openstack image delete "$PKR_VAR_source_image_name"
    rm "$PKR_VAR_source_image_name.download"
fi

# Output the image id if the Packer command was successful
if [ -f "./packer-manifest.json" ]; then
  IMAGE_ID="$(jq --raw-output '.builds[-1].artifact_id' ./packer-manifest.json)"
  echo "image-id=$IMAGE_ID" >> "${GITHUB_OUTPUT:-/dev/stdout}
fi

exit $EXIT_CODE
