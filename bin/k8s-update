#!/usr/bin/env python3

import json
import os
import pathlib

import requests

import easysemver


#####
# This script updates the known Kubernetes versions to the latest patch version
#####


RELEASES_URL = "https://api.github.com/repos/kubernetes/kubernetes/releases"


def k8s_latest_version_for_series(series):
    """
    Returns the latest Kubernetes version for the given series.
    """
    # Using a tilde range allows flexibility in the patch version
    range = easysemver.Range(f"~{series}.0")
    # Return the first version that matches the range
    next_url = RELEASES_URL
    headers = { "Content-Type": "application/json" }
    if "GITHUB_TOKEN" in os.environ:
        headers["Authorization"] = f"Bearer {os.environ['GITHUB_TOKEN']}"
    while next_url:
        response = requests.get(next_url, headers = headers)
        response.raise_for_status()
        for release in response.json():
            try:
                version = easysemver.Version(release["tag_name"])
            except TypeError:
                continue
            if version in range:
                return version
        next_url = response.links.get("next", {}).get("url")


# Get the repository root
repo_root = pathlib.Path(__file__).parent.parent.resolve()

# Update the existing vars files to the most recent patch version
vars_files_dir = repo_root / "vars" / "base"
for vars_file in vars_files_dir.glob("kubernetes_*.json"):
    with vars_file.open() as fh:
        data = json.load(fh)
    # Get the latest version for the series and update the file
    latest_version = k8s_latest_version_for_series(data["kubernetes_series"])
    data.update({
        "kubernetes_deb_version": f"{latest_version.format(prefix = False)}-00",
        "kubernetes_rpm_version": f"{latest_version.format(prefix = False)}-0",
        "kubernetes_semver": str(latest_version),
    })
    with vars_file.open("w") as fh:
        json.dump(data, fh, indent = 4)
