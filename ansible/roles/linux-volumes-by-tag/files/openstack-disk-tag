#!/usr/bin/env python3

import argparse
import contextlib
import io
import json
import logging
import subprocess

import pycdlib


logging.basicConfig(
    filename = "/var/log/openstack-disk-tag.log",
    level = logging.INFO,
    format = "[%(asctime)s] [%(levelname)-8.8s] %(message)s"
)


logger = logging.getLogger(__name__)


def get_config_device():
    logger.info("attempting to locate config device")
    proc = subprocess.run(
        [
            "/usr/sbin/blkid",
            "-t",
            "LABEL=config-2",
            "-o",
            "device"
        ],
        capture_output = True
    )
    if proc.returncode == 0:
        return proc.stdout.decode().strip()
    else:
        logger.warn("failed to locate config device")
        return None


@contextlib.contextmanager
def iso_open(path):
    with open(path, "rb") as fp:
        iso = pycdlib.PyCdlib()
        iso.open_fp(fp)
        try:
            yield iso
        finally:
            iso.close()


def get_instance_metadata(config_device):
    logger.info(f"loading instance metadata from config device - {config_device}")
    with iso_open(config_device) as iso:
        data = io.BytesIO()
        iso.get_file_from_iso_fp(data, iso_path = "/openstack/latest/meta_data.json;1")
        return json.loads(data.getvalue())


def find_device_for_serial(metadata, serial):
    logger.info("locating device in instance metadata")
    try:
        return next(
            d
            for d in metadata.get("devices", [])
            if d.get("serial", "").startswith(serial)
        )
    except StopIteration:
        logger.warning("no metadata device for serial number")
        return None


def output_tag_for_device(device):
    # We only output the first tag, in a format that udev IMPORT can consume
    try:
        tag = next(iter(device.get("tags", [])))
        logger.info(f"found tag '{tag}' for device")
        print(f"OPENSTACK_TAG={tag}")
    except StopIteration:
        logger.warning("device does not have any metadata tags")


def main():
    parser = argparse.ArgumentParser(
        description = "Discovers the tag for an attached OpenStack volume."
    )
    parser.add_argument("serial", help = "The serial number of the disk.")
    args = parser.parse_args()

    logger.info(f"running for device with serial number - {args.serial}")

    config_device = get_config_device()
    if not config_device:
        return
    metadata = get_instance_metadata(config_device)
    device = find_device_for_serial(metadata, args.serial)
    if device:
        output_tag_for_device(device)


if __name__ == "__main__":
    try:
        main()
    except BaseException as exc:
        logger.exception("exception occured during execution")
        raise
