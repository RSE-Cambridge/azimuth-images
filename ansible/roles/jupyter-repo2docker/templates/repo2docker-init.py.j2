#!/usr/bin/env python3

import pathlib
import shlex
import subprocess
import sys

import dbus
import jinja2
import requests


print("Reading Zenith properties from metadata service...")
response = requests.get("http://169.254.169.254/openstack/latest/meta_data.json")
response.raise_for_status()
metadata = response.json()
user_metadata = metadata.get("meta", {})

print("Creating filesystem and mounting extra data volumes...")

block_dev_cmd = shlex.split("/usr/local/bin/mount-additional-block-devices {{ repo2docker_service_data_volumes | join(",")}}")
subprocess.run(block_dev_cmd, check=True)

print("Building repository notebook with repo2docker...")
subprocess.run(
    [
        "sudo",
        "-i",
        "-u", "{{ podman_service_user }}",
        "{{ repo2docker_venv }}/bin/jupyter-repo2docker",
        "--image-name",
        "{{ repo2docker_service_image }}",
        "--engine", "podman",
        "--no-run",
        user_metadata["repo2docker_repository"]
    ],
    check = True
)

print("Writing Zenith configuration...")
zenith_config_dir = pathlib.Path("/etc/zenith/{{ zenith_client_name }}")
zenith_config_dir.mkdir(mode = 0x755, exist_ok = True)
zenith_client_config = zenith_config_dir / "client.yaml"
# Render the file using Jinja2
template = jinja2.Environment().from_string(
"""
ssh_identity_path: /home/zenith/.ssh/id_zenith

# Init options
registrar_url: {{ "{{" }} zenith_client_registrar_url }}
token: {{ "{{" }} zenith_client_registrar_token }}
verify_ssl: {{ "{{" }} 'yes' if zenith_client_registrar_verify_ssl else 'no' }}

# Connect options
server_address: {{ "{{" }} zenith_client_sshd_host }}
server_port: {{ "{{" }} zenith_client_sshd_port }}
forward_to_host: 127.0.0.1
forward_to_port: 8888

auth_params:
  tenancy-id: {{ "{{" }} project_id }}

"""
)
with zenith_client_config.open("w") as fh:
    fh.write(
        template.render(
            zenith_client_registrar_url = user_metadata["azimuth_apps_registrar_url"],
            zenith_client_registrar_token = user_metadata["azimuth_apps_registrar_token"],
            zenith_client_registrar_verify_ssl = False,
            zenith_client_sshd_host = user_metadata["azimuth_apps_sshd_host"],
            zenith_client_sshd_port = user_metadata["azimuth_apps_sshd_port"],
            project_id = metadata["project_id"]
        )
    )

print("Initialising Zenith client...")
subprocess.run(
    [
        "sudo",
        "-i",
        "-u", "{{ podman_service_user }}",
        "podman",
        "run",
        "--cgroups=no-conmon",
        "--restart=no",
        "--name", "{{ zenith_client_name }}-init",
        "--volume", f"{zenith_config_dir}:/etc/zenith:ro",
        "--volume", "{{ zenith_client_name }}-ssh:/home/zenith/.ssh",
        "{{ zenith_client_image }}",
        "zenith-client",
        "init",
    ],
    check = True
)

# Start and enable the services
services = [
    "repo2docker.service",
    "{{ repo2docker_service_name }}.service",
    "{{ zenith_client_name }}.service"
]

system_bus = dbus.SystemBus()
systemd1 = system_bus.get_object("org.freedesktop.systemd1", "/org/freedesktop/systemd1")
manager = dbus.Interface(systemd1, "org.freedesktop.systemd1.Manager")
print("Enabling repo2docker services...")
manager.EnableUnitFiles(services, False, True)
manager.Reload()
for service in services:
    print(f"Starting service '{service}'...")
    manager.RestartUnit(service, "fail")
